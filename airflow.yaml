---
jobs:
  - name: lint
    plan:
      - get: resource-dags-pr
        trigger: true
        version: every
      
      # Update github 'checks' on PR
      - aggregate:
        - put: resource-dags-pr
          params:
            path: resource-dags-pr
            status: pending
            context: lint
          attempts: 3

        - put: resource-dags-pr
          params:
            path: resource-dags-pr
            status: pending
            context: list-roles
           attempts: 3
      # run the lint and list roles tasks concurrently
      - aggregate:
        - task: run-lint
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: quay.io/mojanalytics/airflow
                tag: latest
            inputs:
              - name: resource-dags-pr
            params:
              AIRFLOW__CORE__LOAD_EXAMPLES: false
              AIRFLOW__CORE__DAGS_FOLDER: ./resource-dags-pr
            run:
              path: python
              args:
                - -c
                - |
                  from airflow.models import DagBag
                  import airflow.utils.dag_processing
                  d = DagBag()
                  assert len(d.import_errors) == 0, 'There should be no DAG failures. Got {}'.format(d.import_errors)
        
        - task: list-roles-used-by-dags
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: quay.io/mojanalytics/airflow
                tag: latest
            inputs:
              - name: resource-dags-pr
            outputs:
              - name: dag-roles
            params:
              AIRFLOW__CORE__LOAD_EXAMPLES: false
              AIRFLOW__CORE__DAGS_FOLDER: ./resource-dags-pr
            run:
              path: python
              args:
                - -c
                - |
                  import itertools
                  from airflow.models import DagBag
                  import airflow.utils.dag_processing
                  
                  d = DagBag()

                  all_tasks = itertools.chain.from_iterable(dag.tasks for dag in d.dags.values())
                  annotated_tasks = [x for x in all_tasks if hasattr(x, 'annotations')]

                  annotations = set(itertools.chain.from_iterable(t.annotations.values() for t in annotated_tasks if t.annotations))
                  with open('dag-roles/roles.txt', 'w') as f:
                    f.writelines([f'{role}\n' for role in annotations])
        on_failure:
          put: resource-dags-pr
          params:
            path: resource-dags-pr
            status: failure
            context: list-roles
          attempts: 3
      
      
      # mark first two tasks' github 'checks' as success and mark the 
      # check roles one as pending
      - aggregate:
        - put: resource-dags-pr
          params:
            path: resource-dags-pr
            status: success
            context: list-roles
          attempts: 3
        - put: resource-dags-pr
          params:
            path: resource-dags-pr
            status: success
            context: lint
          attempts: 3
        - put: resource-dags-pr
          params:
            path: resource-dags-pr
            status: pending
            context: check-role-annotation
          attempts: 3
        - put: resource-dags-pr
          params:
            path: resource-dags-pr
            status: pending
            context: iam-policy-change
          attempts: 3
        - put: resource-dags-pr
          params:
            path: resource-dags-pr
            status: pending
            context: pep8
          attempts: 3

      - task: check-role-annotation
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/awscli
              tag: latest
          inputs:
            - name: resource-dags-pr
            - name: dag-roles
          outputs:
            - name: comment
          params:
              AWS_ACCESS_KEY_ID: ((secrets.iam-list-roles-key-id))
              AWS_SECRET_ACCESS_KEY: ((secrets.iam-list-roles-secret-access-key))
          run:
            path: sh
            args:
              - -c 
              - |
                aws iam list-roles | jq -r .Roles[].RoleName > dag-roles/aws.txt
                sort dag-roles/roles.txt -o dag-roles/roles.txt
                sort dag-roles/aws.txt -o dag-roles/aws.txt
                comm -23 dag-roles/roles.txt dag-roles/aws.txt > dag-roles/missing-from-aws.txt
                echo "#### annotated roles ###"
                cat dag-roles/roles.txt
                echo "### missing AWS IAM role(s) ###" > comment/comment.txt
                echo \`\`\` >> comment/comment.txt
                cat dag-roles/missing-from-aws.txt >> comment/comment.txt
                echo \`\`\` >> comment/comment.txt
                echo "⚠ ensure the roles ☝ are defined in the aws console ⚠" >> comment/comment.txt
                cat comment/comment.txt
                exit $(wc -l dag-roles/missing-from-aws.txt | awk '{print $1}')
        on_failure:
          put: resource-dags-pr
          params:
            path: resource-dags-pr
            status: failure              
            context: check-role-annotation
            comment_file: comment/comment.txt
          attempts: 3
      - put: resource-dags-pr
        params:
          path: resource-dags-pr
          status: success
          context: check-role-annotation
        attempts: 3

      - task: git-list-updated-dags
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: quay.io/s_block/alpine-git-jq
              tag: latest
          inputs:
            - name: resource-dags-pr
          outputs:
            - name: airflow-dags
          params:
            GITHUB_TOKEN: ((secrets.github-access-token))
          run:
            path: bash
            args:
              - -c
              - |
                git clone https://moj-analytical-services:$GITHUB_TOKEN@github.com/moj-analytical-services/airflow-dags.git
                cd $(pwd)/airflow-dags
                git fetch --all
                branch=$(jq -r '.[2] | .value' $(pwd)/../resource-dags-pr/.git/resource/metadata.json)
                git checkout $branch
                git diff --name-only master | grep -v '/' | grep .py
                git diff --name-only master | grep -v '/' | grep .py > $(pwd)/../dag-list.txt
                cd $(pwd)/../
                echo 'Updated DAG files'
                echo __init__.py >> dag-list.txt
                cat dag-list.txt
                for dagfile in $(pwd)/airflow-dags/*.py; do
                  if grep -q $(basename $dagfile) dag-list.txt; then
                    echo \"Keeping: $(basename $dagfile)\"
                  else
                    echo \"REMOVING: $(basename $dagfile)\"
                    rm -rf $dagfile
                  fi
                done

      - task: list-images-used-by-updated-dags
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: quay.io/mojanalytics/airflow
              tag: latest
          inputs:
            - name: airflow-dags
          outputs:
            - name: dag-images
          params:
            AIRFLOW__CORE__LOAD_EXAMPLES: false
            AIRFLOW__CORE__DAGS_FOLDER: ./airflow-dags
          run:
            path: python
            args:
              - -c
              - |
                import itertools
                from airflow.models import DagBag
                import airflow.utils.dag_processing

                d = DagBag()

                all_tasks = itertools.chain.from_iterable(dag.tasks for dag in d.dags.values())

                print([f'{task.image}\n' for task in all_tasks if getattr(task, 'image', None) and 'amazonaws.com' in task.image])

                with open('dag-images/images.txt', 'w') as f:
                    f.writelines([f'{task.image}\n' for task in all_tasks if getattr(task, 'image', None) and 'amazonaws.com' in task.image])

      - task: extract-policies-from-images
        privileged: true
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: quay.io/s_block/alpine-git-jq
              tag: latest
          inputs:
            - name: dag-images
          outputs:
            - name: policies
          params:
            GITHUB_TOKEN: ((secrets.github-access-token))
          run:
            path: sh
            args:
              - -exc
              - |
                echo '[]' | jq -S . > policies/list.json
                cat dag-images/images.txt
                cat dag-images/images.txt | while read line
                do
                  {
                    git clone https://moj-analytical-services:$GITHUB_TOKEN@github.com/moj-analytical-services/$line.git
                    if [ -f $line/deploy.json ] && [ -f $line/iam_policy.json ]; then
                      role=$(cat $line/deploy.json | jq -r '.role_name')
                      policy=$(cat $line/iam_policy.json | jq -r .)
                      rm -rf $line
                      policies=$(cat policies/list.json | jq --argjson policy "$policy" --arg role "$role"  --arg app_name "$line" '. += [{role: $role, policy: $policy, app_name: $app_name}]')
                      echo $policies | jq -S . > policies/list.json
                    fi
                  } || {
                    echo 'No repo'
                  }
                done
                cat policies/list.json | jq -S .

      - aggregate:
        try:
          task: check-iam-changes
          config:
            platform: linux

            image_resource:
              type: docker-image
              source:
                repository: governmentpaas/awscli

            inputs:
              - name: policies

            params:
              AWS_ACCESS_KEY_ID: ((secrets.role-putter-access-key-id))
              AWS_SECRET_ACCESS_KEY: ((secrets.role-putter-secret-access-key))

            run:
              path: sh
              args:
                - -ec
                - |
                  cat policies/list.json | jq -r '.[] | [.app_name, .role, (.policy|tostring)] | @tsv' |
                    while IFS=$'\t' read -r app_name role policy; do
                      echo $app_name
                      echo $role
                      echo $policy
                      current=$(aws iam get-role-policy --role-name $role --policy-name $app_name | jq -r '.PolicyDocument')
                      echo $current | jq -S . > current.json
                      echo $policy | jq -S . > new.json
                      export ARE_SAME=$(jq --argfile a new.json --argfile b current.json -n '$a==$b')
                      if [ \"$ARE_SAME\" != \"true\" ]; then
                        echo -e '\033[0;31mChange in iam_policy.json'
                        diff current.json new.json
                        exit 166
                      fi
                      echo -e '\033[0;32mNo changes in iam_policy.json'
                    done
                  echo -e '\033[0;32mNo changes in iam_policy.json'
          on_success:
            put: resource-dags-pr
            params:
              path: resource-dags-pr
              status: success
              context: iam-policy-change
            attempts: 3
          on_failure:
            put: resource-dags-pr
            params:
              path: resource-dags-pr
              status: failure
              context: iam-policy-change
            attempts: 3

      - aggregate:
        try:
          task: pep8
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: python
                tag: alpine
            inputs:
              - name: resource-dags-pr
            run:
              path: sh
              args:
                - -ec
                - |
                  pip install flake8
                  flake8 ./resource-dags-pr/
          on_failure:
            put: resource-dags-pr
            attempts: 3
            params:
              path: resource-dags-pr
              status: failure
              context: pep8
          on_success:
            put: resource-dags-pr
            attempts: 3
            params:
              path: resource-dags-pr
              status: success
              context: pep8

resource_types:
  - name: pull-request
    type: docker-image
    source:
      repository: teliaoss/github-pr-resource

resources:
- name: resource-dags-pr
  type: pull-request
  check_every: 10m
  webhook_token: ((secrets.github-webhook-token))
  source:
    repository: ((repo))
    access_token: ((secrets.github-access-token))
